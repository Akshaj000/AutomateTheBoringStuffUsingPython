
1. What is the function that creates Regex objects?
   
   re.compile()

2. Why are raw strings often used when creating Regex objects?

   so that backslashes do not have to be escaped

3. What does the search() method return?

  It matches object with the string provided in the  arguement.

4. How do you get the actual strings that match the pattern from a Match object?

  Using group(). It returns the meatched string.

5. In the regex created from r'(\d\d\d)-(\d\d\d-\d\d\d\d)', what does group 0 cover? Group 1? Group 2?

   group 0 - entire set
   group 1 - first set of digits (\d\d\d)
   group 2 - second set of digits i.e (\d\d\d-\d\d\d\d)

6. Parentheses and periods have specific meanings in regular expression syntax. 
   How would you specify that you want a regex to match actual parentheses and period characters?
  
   using backslash. eg: \. , \( , \)

7. The findall() method returns a list of strings or a list of tuples of strings. What makes it return one or the other?

   If regex has no groups -> a list of strings 
   If regex has has groupd-> a list of tuples of strings 
 
8. What does the | character signify in regular expressions?

   or -> it is entered  between two groups

9. What two things does the ? character signify in regular expressions?
    
   ? matches zero or  one  of the group. used to signify non greedy matching
  
10. What is the difference between the + and * characters in regular expressions?

    + matches one or more and * matches zero or more.

11. What is the difference between {3} and {3,5} in regular expressions?

    {3} matches three instances of the precceding group.
    {3,5} matches between three and five instances.
    
12. What do the \d, \w, and \s shorthand character classes signify in regular expressions?

    \d - digit between 0-9
    \w - word
    \s - space
    
13. What do the \D, \W, and \S shorthand character classes signify in regular expressions?
    
    \D - non digits
    \W - non word
    \S - non spaces

14. What is the difference between .* and .*??

    .* performs a greedy match
    .*?? performs a non-greedy match


15. What is the character class syntax to match all numbers and lowercase letters?

   [0-9a-z]

16. How do you make a regular expression case-insensitive?

    using re.I or re.IGNORECASE as the second arguement to re.compile().

17. What does the . character normally match? What does it match if re.DOTALL is passed as the second argument to re.compile()?

    . matches all characters except newline character but if we add re.DOTALL as arguement of re.compile(),  the dot will also match \n.

18. If numRegex = re.compile(r'\d+'), what will numRegex.sub('X', '12 drummers, 11 pipers, five rings, 3 hens') return?

    'X drummers, X pipers, five rings, X hens'    
   
19. What does passing re.VERBOSE as the second argument to re.compile() allow you to do?

    Allows us to add white space and commands inside.Multiline strings are used.

20. How would you write a regex that matches a number with commas for every three digits? It must match the following:

    '42'
    '1,234'    re.compile(r'[A-Z][a-z]*\sWatanabe')ord that begins with a capital letter. The regex must match the following:

    'Haruto Watanabe'
    'Alice Watanabe'
    'RoboCop Watanabe'

but not the following:

    'haruto Watanabe' (where the first name is not capitalized)
    'Mr. Watanabe' (where the preceding word has a nonletter character)
    'Watanabe' (which has no first name)
    'Haruto watanabe' (where Watanabe is not capitalized)

    re.compile(r'[A-Z'[a-z]*\sWatanabe')

22. How would you write a regex that matches a sentence where the first word is either Alice, Bob, or Carol; the second word is either eats, pets, or throws; 
    the third word is apples, cats, or baseballs; and the sentence ends with a period? This regex should be case-insensitive. It must match the following:

    'Alice eats apples.'
    'Bob pets cats.'
    'Carol throws baseballs.'
    'Alice throws Apples.'
    'BOB EATS CATS.'

but not the following:

    'RoboCop eats apples.'
    'ALICE THROWS FOOTBALLS.'
    'Carol eats 7 cats.'

re.compile(r'(Alice|Bob|Carol)\s(eats|pets|throws)\s(apples|cats|baseballs)\.', re.IGNORECASE)