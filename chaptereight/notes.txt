inputStr() - Is like the built-in input() function but has the general PyInputPlus features. 
            You can also pass a custom validation function to it

inputNum() - Ensures the user enters a number and returns an int or float, 
            depending on if the number has a decimal point in it

inputChoice() - Ensures the user enters one of the provided choices

inputMenu() - Is similar to inputChoice(), but provides a menu with numbered or 
             lettered options

inputDatetime() - Ensures the user enters a date and time

inputYesNo() - Ensures the user enters a “yes” or “no” response

inputBool() - Is similar to inputYesNo(), but takes a “True” or “False” response and 
             returns a Boolean value

inputEmail() - Ensures the user enters a valid email address

inputFilepath() - Ensures the user enters a valid file path and filename, and can optionally 
                check that a file with that name exists

inputPassword() - Is like the built-in input(), but displays * characters as the user types 
                so that passwords, or other sensitive information, aren’t displayed on the screen
                
        
        
                
>>> import pyinputplus as pyip
>>> response = pyip.inputNum('Enter num: ', min=4)
Enter num:3
Input must be at minimum 4.
Enter num:4
>>> response
4
>>> response = pyip.inputNum('Enter num: ', greaterThan=4)
Enter num: 4
Input must be greater than 4.
Enter num: 5
>>> response
5
>>> response = pyip.inputNum('>', min=4, lessThan=6)
Enter num: 6
Input must be less than 6.
Enter num: 3
Input must be at minimum 4.
Enter num: 4
>>> response
4




>>> import pyinputplus as pyip
>>> response = pyip.inputNum('Enter num: ')
Enter num:(blank input entered here)
Blank values are not allowed.
Enter num: 42
>>> response
42
>>> response = pyip.inputNum(blank=True)
(blank input entered here)
>>> response
''



>>> import pyinputplus as pyip
>>> response = pyip.inputNum(limit=2)
blah
'blah' is not a number.
Enter num: number
'number' is not a number.
Traceback (most recent call last):
    --snip--
pyinputplus.RetryLimitException
>>> response = pyip.inputNum(timeout=10)
42 (entered after 10 seconds of waiting)
Traceback (most recent call last):
    --snip--
pyinputplus.TimeoutException


>>> response = pyip.inputNum(limit=2, default='N/A')
hello
'hello' is not a number.
world
'world' is not a number.
>>> response
'N/A'



>>> import pyinputplus as pyip
>>> response = pyip.inputNum(allowRegexes=[r'(I|V|X|L|C|D|M)+', r'zero'])
XLII
>>> response
'XLII'
>>> response = pyip.inputNum(allowRegexes=[r'(i|v|x|l|c|d|m)+', r'zero'])
xlii
>>> response
'xlii'



>>> import pyinputplus as pyip
>>> response = pyip.inputNum(blockRegexes=[r'[02468]$'])
42
This response is invalid.
44
This response is invalid.
43
>>> response
43




>>> import pyinputplus as pyip
>>> response = pyip.inputStr(allowRegexes=[r'caterpillar', 'category'],
blockRegexes=[r'cat'])
cat
This response is invalid.
catastrophe
This response is invalid.
category
>>> response
'category'



